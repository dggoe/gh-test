name: CI Build

on:
  pull_request:
    types: [opened, ready_for_review]
  merge_group:
      types: [checks_requested]
  workflow_dispatch:
    inputs:
      tag:
        description: Tag for manually running CI Build workflow
        required: False
        default: ''

jobs:
  first_check:
    name: first code check / python-3.9 / ubuntu-latest / build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Python info
        run: |
          which python
          python --version
      - name: Build package and create dev environment
        run: |
          python -m pip install --upgrade pip poetry
          poetry install
      - name: Show pip list
        run: |
          pip list
      - name: Test with coverage
        run: |
          poetry run pytest --cov --cov-report term --cov-report xml --junitxml=xunit-result.xml
      - name: Correct coverage paths
        run: sed -i "s+$PWD/++g" coverage.xml
      - name: Check style against standards using prospector
        shell: bash -l {0}
        run: prospector -o grouped -o pylint:pylint-report.txt
      - name: Store PR metadata in json file
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
          BASE_REF: ${{ github.event.pull_request.base.ref }}
        run: |
          jq -n --arg pr_number "$PR_NUMBER"\
                --arg head_ref "$HEAD_REF"\
                --arg base_ref "$BASE_REF"\
            '{"pr_number": $pr_number, "head_ref": $head_ref, "base_ref": $base_ref}' > pr_metadata.json
      - name: Check whether import statements are used consistently
        run: isort . --check-only --diff


  test_dev:
    name: test dev environment / python-${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: first_check
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Python info
        run: |
          which python
          python --version
      - name: Install dependencies (includinv dev + chemistry)
        run: |
          python -m pip install --upgrade pip poetry
          poetry install
      - name: Show pip list
        run: |
          pip list
      - name: Run tests
        run: |
          poetry run pytest

  results:
      if: ${{ always() }}
      name: Test Dev Results
      runs-on: ubuntu-latest
      needs: [test_dev]
      steps:
        - run: |
            result="${{ needs.test_dev.result }}"
            if [[ $result == "success" || $result == "skipped" ]]; then
              exit 0
            else
              exit 1
            fi